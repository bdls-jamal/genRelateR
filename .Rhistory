# Check if all packages were successfully loaded
loaded_packages <- (.packages())
missing_packages <- setdiff(packages_to_load, loaded_packages)
if (length(missing_packages) > 0) {
warning(sprintf(
"The following packages failed to load: %s",
paste(missing_packages, collapse = ", ")
))
} else {
message("All required packages have been installed and loaded successfully.")
}
# Return invisibly whether all packages were loaded successfully
invisible(length(missing_packages) == 0)
}
#' Function to verify all required packages are available
#' @return Logical indicating if all required packages are available
#' @export
checkGeneticPackages <- function() {
required_packages <- c(
"Matrix",
"parallel",
# Bioconductor
"VariantAnnotation",
"GenomicRanges",
"SNPRelate",
"gdsfmt",
"SeqArray",
# CRAN
"data.table",
"ggplot2",
"reshape2",
"maps",
"viridis",
"tidyverse",
"readr",
"dplyr",
"tidyr",
"testthat",
"stringr",
"ggrepel",
"sf",
"igraph",
"RColorBrewer",
"plotly",
"mapproj"
)
missing_packages <- required_packages[
!sapply(required_packages, requireNamespace, quietly = TRUE)
]
if (length(missing_packages) > 0) {
warning(sprintf(
"Missing required packages: %s\nPlease run setupGeneticPackages()",
paste(missing_packages, collapse = ", ")
))
return(FALSE)
}
return(TRUE)
}
# If this file is being sourced directly, run the setup
if (sys.nframe() == 0) {
setupGeneticPackages()
source("R/loadAndCleanData.R")
source("R/computationAndAnalysis.R")
source("R/visualizationScripts.R")
}
devtools::document()
devtools::build_vignettes()
Sys.which("Rcmd.exe")
devtools::install()
devtools::document()
warnings()
rm(list = ls())
devtools::document()
devtools::clean_cache()
warnings()
devtools::document()
devtools::document()
devtools::load_all()
warnings()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::build()
devtools::build_vignettes()
devtools::build()
devtools::check()
devtools::build()
devtools::document()
devtools::load_all()
devtools::load_all()
traceback()
devtools::load_all()
tools::package_dependencies()
devtools::load_all()
devtools::document()
ls("package:VariantAnnotation")
devtools:do.call()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
citation(c(    "data.table",
"ggplot2",
"maps",
"viridis",
"tidyverse",
"readr",
"dplyr",
"tidyr",
"stringr",
"ggrepel",
"igraph",
"RColorBrewer",
"plotly", "VariantAnnotation", "GenomicRanges"))
citation("data.table")
citation("ggplot2")
citation("maps")
citation("viridis")
citation("tidyverse")
citation("readr")
citation("dplyr")
citation("tidyr")
citation(Wickham H, Vaughan D, Girlich M (2024). _tidyr: Tidy Messy Data_. R package version 1.3.1,
citation("stringr")
citation("ggrepel")
citation("igraph")
citation("RColorBrewer")
citation("plotly")
citation(C. Sievert. Interactive Web-Based Data Visualization with R, plotly, and shiny. Chapman and Hall/CRC
citation("VariantAnnotation")
citation(Obenchain V, Lawrence M, Carey V, Gogarten S, Shannon P, Morgan M (2014). â€œVariantAnnotation: a
citation("GenomicRanges")
genRelateR::analyzePopulationStructure()
help(package = "genRelateR")
ls("package:genRelateR")
getNamespaceExports("genRelateR")
?filterPopulation
help("genRelateR")
?genRelateR
devtools::document()
#' Install and load required packages for genetic analysis
#'
#' This script installs and loads all necessary packages for the genetic analysis functions.
#' It checks for existing installations and only installs missing packages.
#' @export
setupGeneticPackages <- function() {
# List of required CRAN packages
cranPackages <- c(
"data.table",
"ggplot2",
"maps",
"viridis",
"tidyverse",
"readr",
"dplyr",
"tidyr",
"stringr",
"ggrepel",
"igraph",
"RColorBrewer",
"plotly"
)
# List of required Bioconductor packages
biocPackages <- c(
"VariantAnnotation",
"GenomicRanges"
)
# Install BiocManager if not present
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Install missing CRAN packages
for (pkg in cranPackages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(sprintf("Installing %s from CRAN...", pkg))
install.packages(pkg)
}
}
# Install missing Bioconductor packages
for (pkg in biocPackages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(sprintf("Installing %s from Bioconductor...", pkg))
BiocManager::install(pkg, update = FALSE)
}
}
# Load all required packages with error handling
packages_to_load <- c(
# Bioconductor packages
"VariantAnnotation",
"GenomicRanges",
# CRAN packages
"data.table",
"ggplot2",
"maps",
"viridis",
"tidyverse",
"readr",
"dplyr",
"tidyr",
"stringr",
"ggrepel",
"igraph",
"RColorBrewer",
"plotly"
)
for (pkg in packages_to_load) {
tryCatch({
library(pkg, character.only = TRUE)
message(sprintf("Successfully loaded %s", pkg))
}, error = function(e) {
warning(sprintf("Failed to load %s: %s", pkg, e$message))
})
}
# Check if all packages were successfully loaded
loaded_packages <- (.packages())
missing_packages <- setdiff(packages_to_load, loaded_packages)
if (length(missing_packages) > 0) {
warning(sprintf(
"The following packages failed to load: %s",
paste(missing_packages, collapse = ", ")
))
} else {
message("All required packages have been installed and loaded successfully.")
}
# Return invisibly whether all packages were loaded successfully
invisible(length(missing_packages) == 0)
}
#' Function to verify all required packages are available
#' @return Logical indicating if all required packages are available
#' @export
checkGeneticPackages <- function() {
required_packages <- c(
# Bioconductor
"VariantAnnotation",
"GenomicRanges",
# CRAN
"data.table",
"ggplot2",
"maps",
"viridis",
"tidyverse",
"readr",
"dplyr",
"tidyr",
"stringr",
"ggrepel",
"igraph",
"RColorBrewer",
"plotly"
)
missing_packages <- required_packages[
!sapply(required_packages, requireNamespace, quietly = TRUE)
]
if (length(missing_packages) > 0) {
warning(sprintf(
"Missing required packages: %s\nPlease run setupGeneticPackages()",
paste(missing_packages, collapse = ", ")
))
return(FALSE)
}
return(TRUE)
}
# If this file is being sourced directly, run the setup
if (sys.nframe() == 0) {
setupGeneticPackages()
source("R/loadAndCleanData.R")
source("R/computationAndAnalysis.R")
source("R/visualizationScripts.R")
}
vcf_file <- "inst/extdata/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
# Define a region(range) for analysis(required for very large data files)
chr1_region <- GRanges(
seqnames = "1",
ranges = IRanges(start = 20000000, end = 20001000)
)
# Call loadGeneticData function with specified region and vcf file
genetic_data <- genRelateR::loadGeneticData(vcf_file, regions = chr1_region)
pop_metadata <- "inst/extdata/population_metadata.txt"
populations <- c(
"CHB", "JPT", "CHS", "CDX", "KHV",
"CEU", "TSI", "GBR", "FIN", "IBS",
"YRI", "LWK", "GWD", "MSL", "ESN",
"ASW", "ACB", "MXL", "PUR", "CLM",
"PEL", "GIH", "PJL", "BEB", "STU", "ITU"
)
# Call filterPopulation with loaded data, metadata, and specified populations
filtered_data <- genRelateR::filterPopulation(genetic_data, pop_metadata, populations)
base_url <- "ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/"
vcf_file <- "ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
tbi_file <- paste0(vcf_file, ".tbi")
dest_folder <- "inst/extdata/vcf"
vcf_dest <- file.path(dest_folder, vcf_file)
tbi_dest <- file.path(dest_folder, tbi_file)
download.file(url = paste0(base_url, vcf_file), destfile = vcf_dest, mode = "wb")
pop_codes_url <- "https://raw.githubusercontent.com/bdls-jamal/genRelateR/blob/main/inst/extdata/population_codes.txt"
dest_folder <- "data"
getwd()
pop_codes_dest <- file.path(dest_folder, "population_codes.txt")
download.file(url = pop_codes_url, destfile = pop_codes_dest, mode = "wb")
pop_codes_url <- "https://raw.githubusercontent.com/bdls-jamal/genRelateR/main/inst/extdata/population_codes.txt"
download.file(url = pop_codes_url, destfile = pop_codes_dest, mode = "wb")
devtools::build()
genRelateR::setupGeneticPackages()
vcf_file <- "inst/extdata/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
# Define a region(range) for analysis(required for very large data files)
chr1_region <- GRanges(
seqnames = "1",
ranges = IRanges(start = 20000000, end = 20001000)
)
# Call loadGeneticData function with specified region and vcf file
genetic_data <- genRelateR::loadGeneticData(vcf_file, regions = chr1_region)
pop_metadata <- "inst/extdata/population_metadata.txt"
# Choose populations to filter by(all are selected in this example)
populations <- c(
"CHB", "JPT", "CHS", "CDX", "KHV",
"CEU", "TSI", "GBR", "FIN", "IBS",
"YRI", "LWK", "GWD", "MSL", "ESN",
"ASW", "ACB", "MXL", "PUR", "CLM",
"PEL", "GIH", "PJL", "BEB", "STU", "ITU"
)
# Call filterPopulation with loaded data, metadata, and specified populations
filtered_data <- genRelateR::filterPopulation(genetic_data, pop_metadata, populations)
# Perform population structure analysis by calling analyzePopulationStructure
pca_results <- genRelateR::analyzePopulationStructure(
filtered_data$vcf_data,
filtered_data$pop_metadata,
method = "pca"
)
# Create PCA data cluster visualization
# Call plotPopulationPca then print to view
pca_plot <- genRelateR::plotPopulationPca(
analysis_results = pca_results,
filtered_data$pop_metadata,
title = "Population Structure PCA",
ellipses = TRUE,
super_pop = TRUE
)
print(pca_plot)
# Create PCA data cluster visualization
# Call plotPopulationPca then print to view
pca_plot <- genRelateR::plotPopulationPca(
analysis_results = pca_results,
filtered_data$pop_metadata,
title = "Population Structure PCA",
ellipses = TRUE,
super_pop = TRUE
)
print(pca_plot)
# Create PCA data map visualization
# Call plotAncestryMap then print to view
ancestry_map <- genRelateR::plotAncestryMap(
pca_results,
filtered_data$pop_metadata,
title = "Global Population Distribution"
)
print(ancestry_map)
# Create PCA data map visualization
# Call plotAncestryMap then print to view
ancestry_map <- genRelateR::plotAncestryMap(
pca_results,
filtered_data$pop_metadata,
title = "Global Population Distribution"
)
print(ancestry_map)
# Create PCA data map visualization
# Call plotAncestryMap then print to view
ancestry_map <- genRelateR::plotAncestryMap(
pca_results,
filtered_data$pop_metadata,
title = "Global Population Distribution"
)
print(ancestry_map)
source("C:/Users/20kob/Desktop/BCB410/genRelateR/R/visualizationScripts.R")
# Create PCA data map visualization
# Call plotAncestryMap then print to view
ancestry_map <- genRelateR::plotAncestryMap(
pca_results,
filtered_data$pop_metadata,
title = "Global Population Distribution"
)
print(ancestry_map)
source("C:/Users/20kob/Desktop/BCB410/genRelateR/R/visualizationScripts.R")
# Create PCA data map visualization
# Call plotAncestryMap then print to view
ancestry_map <- genRelateR::plotAncestryMap(
pca_results,
filtered_data$pop_metadata,
title = "Global Population Distribution"
)
print(ancestry_map)
View(ancestry_map)
print(ancestry_map)
View(genetic_data)
View(filtered_data)
View(pca_results)
devtools::document()
devtools::check()
install.packages(Rtools)
devtools::check()
version
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(c("VariantAnnotation", "GenomicRanges"))
devtools::check()
devtools::document()
install.packages(c(
"shiny",
"shinydashboard",
"shinyFiles",
"DT",
"plotly",
"devtools"
))
install.packages(c("shiny", "shinydashboard", "shinyFiles", "DT", "plotly", "devtools"))
rungenRelateR()
#' Launch genRelateR Shiny Application
#'
#' @description
#' Launches the interactive Shiny web application for genomic relatedness analysis
#'
#' @return Launches the Shiny application
#'
#' @export
#' @importFrom shiny runApp
#'
#' @examples
#' \dontrun{
#' rungenRelateR()
#' }
rungenRelateR <- function() {
# Find the Shiny app directory
appDir <- system.file("shiny-scripts", package = "genRelateR")
# Error handling if app directory not found
if (appDir == "") {
stop("Could not find Shiny app directory. Please reinstall genRelateR.", call. = FALSE)
}
# Launch the Shiny app
shiny::runApp(appDir, display.mode = "normal")
}
rungenRelateR()
# Find the Shiny app directory
appDir <- system.file("shiny-scripts", package = "genRelateR")
install.packages("genRelateR")
devtools::install_github("bdls-jamal/genRelateR", build_vignettes = TRUE)
system.file(package = "genRelateR")
# Find the Shiny app directory
appDir <- system.file("shiny-scripts", package = "genRelateR")
devtools::install_github("bdls-jamal/genRelateR", build_vignettes = TRUE)
options(repos = BiocManager::repositories())
devtools::install_github("bdls-jamal/genRelateR", build_vignettes = TRUE)
devtools::install_github("bdls-jamal/genRelateR", build_vignettes = TRUE)
devtools::install_github("bdls-jamal/genRelateR", build_vignettes = TRUE)
# Find the Shiny app directory
appDir <- system.file("shiny-scripts", package = "genRelateR")
#' Launch genRelateR Shiny Application
#'
#' @description
#' Launches the interactive Shiny web application for genomic relatedness analysis
#'
#' @return Launches the Shiny application
#'
#' @export
#' @importFrom shiny runApp
#'
#' @examples
#' \dontrun{
#' rungenRelateR()
#' }
rungenRelateR <- function() {
# Find the Shiny app directory
appDir <- system.file("shiny-scripts", package = "genRelateR")
# Error handling if app directory not found
if (appDir == "") {
stop("Could not find Shiny app directory. Please reinstall genRelateR.", call. = FALSE)
}
# Launch the Shiny app
shiny::runApp(appDir, display.mode = "normal")
}
rungenRelateR()
base_url <- "ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/"
vcf_file <- "ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
tbi_file <- paste0(vcf_file, ".tbi")
dest_folder <- "data/vcf_files"
if (!dir.exists(dest_folder)) {
dir.create(dest_folder, recursive = TRUE)
}
vcf_dest <- file.path(dest_folder, vcf_file)
tbi_dest <- file.path(dest_folder, tbi_file)
download.file(url = paste0(base_url, vcf_file), destfile = vcf_dest, mode = "wb")
download.file(url = paste0(base_url, tbi_file), destfile = tbi_dest, mode = "wb")
rungenRelateR()
rungenRelateR()
runApp('inst/shiny-scripts')
runApp('inst/shiny-scripts')
runApp('inst/shiny-scripts')
runApp('inst/shiny-scripts')
runApp('inst/shiny-scripts')
runApp('inst/shiny-scripts')
runApp('inst/shiny-scripts')
rv$vcf_file <- input$vcf_file$datapath
source("C:/Users/kabss/Desktop/BCB410/genRelateR/R/loadAndCleanData.R")
runApp('inst/shiny-scripts')
runApp('inst/shiny-scripts')
