usethis::use_mit_license("Kobi Schmalenberg")
utils::sessionInfo()
rmarkdown::render("README.Rmd")
usethis::use_vignette("genRelateR_tutorial")
install.packages("testthat")
library(testthat)
getwd()
test_dir("tests/testthat")
getwd()
file.exists("../../data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz")
file.exists("data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz")
result <- loadGeneticData("data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz")
source("R/loadAndCleanData.R")
result <- loadGeneticData("data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz")
vcf_test <- "data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
library(vcfR)
vcf_data <- read.vcfR(vcf_test)
scan(vcf_test)
head(ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf)
head("data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf")
scanVcfHeader("/data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz")
library(scanVcfHeader)
library(VariantAnnotation)
library(scanVcfHeader)
scanVcfHeader("/data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz")
scanVcfHeader("data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz")
# Sample VCF file for testing (adjust the path as necessary)
vcf_file <- "../../data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
# Define a ScanVcfParam for a specific range in chromosome 1
param <- ScanVcfParam(which = GRanges("1", IRanges(1e6, 1.5e6)))  # Adjust range as needed
# Call the loadGeneticData function
genetic_data <- loadGeneticData(file_path = vcf_file, genome = "b37", param = param)
# Load the function to be tested
source("../../R/loadAndCleanData.R")
# Load the function to be tested
source("R/loadAndCleanData.R")
# Call the loadGeneticData function
genetic_data <- loadGeneticData(file_path = vcf_file, genome = "b37", param = param)
# Sample VCF file for testing (adjust the path as necessary)
vcf_file <- "data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
# Call the loadGeneticData function
genetic_data <- loadGeneticData(file_path = vcf_file, genome = "b37", param = param)
colnames(genetic_data)
type(genetic_data)
head(genetic_data)
genetic_data
zcat data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz | head -n 50
zcat "data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz" | head -n 50
# Run the setup
setupGeneticPackages()
#' Install and load required packages for genetic analysis
#'
#' This script installs and loads all necessary packages for the genetic analysis functions.
#' It checks for existing installations and only installs missing packages.
# Function to safely install and load packages
setupGeneticPackages <- function() {
# List of required CRAN packages
cranPackages <- c(
"data.table",
"ggplot2",
"reshape2",
"maps",
"viridis"
)
# List of required Bioconductor packages
biocPackages <- c(
"VariantAnnotation",
"GenomicRanges",
"SNPRelate"
)
# Install BiocManager if not present
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Install missing CRAN packages
for (pkg in cranPackages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
# Install missing Bioconductor packages
for (pkg in biocPackages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
BiocManager::install(pkg, update = FALSE)
}
}
# Load all required packages
library(VariantAnnotation)
library(GenomicRanges)
library(SNPRelate)
library(data.table)
library(ggplot2)
library(reshape2)
library(maps)
library(viridis)
# Return success message
cat("All required packages have been installed and loaded successfully.\n")
}
# Run the setup
setupGeneticPackages()
source("setup_packages.R")
# Install the package if you haven't already
source("./setup_packages.R")
source("R/setup_packages.R")
# Install the package if you haven't already
source("./setupPackages.R")
# Install the package if you haven't already
source("setupPackages.R")
# Install the package if you haven't already
source("R/setupPackages.R")
source("test-geneticFunctions.R")
source("test/testthat/test-geneticFunctions.R")
source("tests/testthat/test-geneticFunctions.R")
source("tests/testthat/test-geneticFunctions.R")
source("tests/testthat/test-geneticFunctions.R")
source("tests/testthat/test-geneticFunctions.R")
source("R/loadAndCleanData.R")
source("R/loadAndCleanData.R")
source("R/loadAndCleanData.R")
source("R/loadAndCleanData.R")
source("R/setupPackages.R")
source("tests/testthat/test-geneticFunctions.R")
source("tests/testthat/test-geneticFunctions.R")
param@which
source("C:/Users/kabss/Desktop/BCB410/Final Project/genRelateR/R/loadAndCleanData.R")
source("tests/testthat/test-geneticFunctions.R")
source("C:/Users/kabss/Desktop/BCB410/Final Project/genRelateR/R/loadAndCleanData.R")
source("C:/Users/kabss/Desktop/BCB410/Final Project/genRelateR/R/loadAndCleanData.R")
source("C:/Users/kabss/Desktop/BCB410/Final Project/genRelateR/R/loadAndCleanData.R")
source("C:/Users/kabss/Desktop/BCB410/Final Project/genRelateR/R/loadAndCleanData.R")
rm(ls())
rm("ls()")
ls()
rm(genetic_data)
rm(param)
rm(testConfig)
rm(vcf_file )
rm(vcf_test)
vcf_file <- create_test_vcf()
source("tests/testthat")
source("tests/testthat/test-genericFunctions.R")
source("tests/testthat/test-genericFunctions.R")
getwd()
source("tests/testthat/test-geneticFunctions.R")
# Create test file
vcf_file <- create_test_vcf()
# Test basic loading
result <- loadGeneticData(vcf_file)
source("C:/Users/kabss/Desktop/BCB410/Final Project/genRelateR/R/loadAndCleanData.R")
source("tests/testthat/test-geneticFunctions.R")
source("tests/testthat/test-geneticFunctions.R")
source("C:/Users/kabss/Desktop/BCB410/Final Project/genRelateR/R/loadAndCleanData.R")
source("C:/Users/kabss/Desktop/BCB410/Final Project/genRelateR/R/loadAndCleanData.R")
source("tests/testthat/test-geneticFunctions.R")
