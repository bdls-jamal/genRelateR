"GenomicRanges",
"SNPRelate",
"gdsfmt",
"SeqArray",
# CRAN
"data.table",
"ggplot2",
"reshape2",
"maps",
"viridis",
"tidyverse",
"readr",
"dplyr",
"tidyr",
"testthat",
"stringr",
"ggrepel",
"sf",
"igraph",
"RColorBrewer",
"plotly",
"mapproj"
)
missing_packages <- required_packages[
!sapply(required_packages, requireNamespace, quietly = TRUE)
]
if (length(missing_packages) > 0) {
warning(sprintf(
"Missing required packages: %s\nPlease run setupGeneticPackages()",
paste(missing_packages, collapse = ", ")
))
return(FALSE)
}
return(TRUE)
}
# If this file is being sourced directly, run the setup
if (sys.nframe() == 0) {
setupGeneticPackages()
source("R/loadAndCleanData.R")
source("R/computationAndAnalysis.R")
source("R/visualizationScripts.R")
}
library(vroom)
dat <- vroom("data/population_metadata.txt")
problems(dat)
# Create sample population metadata
pop_metadata <- "data/population_metadata.txt"
# Filter populations
populations <- c(
"CHB", "JPT", "CHS", "CDX", "KHV",
"CEU", "TSI", "GBR", "FIN", "IBS",
"YRI", "LWK", "GWD", "MSL", "ESN",
"ASW", "ACB", "MXL", "PUR", "CLM",
"PEL", "GIH", "PJL", "BEB", "STU", "ITU"
)
# Example data setup
# Load genetic data
vcf_file <- "data/vcf/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
genetic_data <- loadGeneticData(vcf_file)
filtered_data <- filterPopulation(genetic_data, pop_metadata, populations)
indexTabix("data/vcf/ALL.chr2.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz", format = "vcf")
# Example data setup
# Load genetic data
vcf_file <- "data/vcf/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
genetic_data <- loadGeneticData(vcf_file)
# Create sample population metadata
pop_metadata <- "data/population_metadata.txt"
# Filter populations
populations <- c(
"CHB", "JPT", "CHS", "CDX", "KHV",
"CEU", "TSI", "GBR", "FIN", "IBS",
"YRI", "LWK", "GWD", "MSL", "ESN",
"ASW", "ACB", "MXL", "PUR", "CLM",
"PEL", "GIH", "PJL", "BEB", "STU", "ITU"
)
filtered_data <- filterPopulation(genetic_data, pop_metadata, populations)
filtered_data <- filterPopulation(genetic_data, pop_metadata, populations)
source("C:/Users/20kob/Desktop/BCB410/genRelateR/R/loadAndCleanData.R")
filtered_data <- filterPopulation(genetic_data, pop_metadata, populations)
# Compute relatedness
relatedness_results <- computeRelatedness(
filtered_data$vcf_data,
filtered_data$pop_metadata
)
# Perform population structure analysis
pca_results <- analyzePopulationStructure(
filtered_data$vcf_data,
filtered_data$pop_metadata,
method = "pca"
)
View(filtered_data)
View(genetic_data)
# Example data setup
# Load genetic data
vcf_file <- "data/vcf/ALL.chr2.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
genetic_data <- loadGeneticData(vcf_file)
View(genetic_data)
# Example data setup
# Load genetic data
vcf_file <- "data/vcf/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
genetic_data <- loadGeneticData(vcf_file)
View(genetic_data)
source("C:/Users/20kob/Desktop/BCB410/genRelateR/R/loadAndCleanData.R")
genetic_data <- loadGeneticData(vcf_file)
View(genetic_data)
source("C:/Users/20kob/Desktop/BCB410/genRelateR/R/loadAndCleanData.R")
genetic_data <- loadGeneticData(vcf_file, samples = c("HG00096", "HG00097"))
chr22_region <- GRanges(
seqnames = "22",
ranges = IRanges(start = 1, end = 20001000)
)
genetic_data <- loadGeneticData(vcf_file, regions = chr22_region)
View(genetic_data)
source("C:/Users/20kob/Desktop/BCB410/genRelateR/R/loadAndCleanData.R")
chr22_region <- GRanges(
seqnames = "22",
ranges = IRanges(start = 1999000, end = 20001000)
)
genetic_data <- loadGeneticData(vcf_file, regions = chr22_region)
indexTabix("data/vcf/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz", format = "vcf")
chr22_region <- GRanges(
seqnames = "22",
ranges = IRanges(start = 19999000, end = 20001000)
)
genetic_data <- loadGeneticData(vcf_file, regions = chr22_region)
genetic_data <- loadGeneticData(vcf_file, regions = chr22_region)
View(genetic_data)
# Create sample population metadata
pop_metadata <- "data/population_metadata.txt"
# Filter populations
populations <- c(
"CHB", "JPT", "CHS", "CDX", "KHV",
"CEU", "TSI", "GBR", "FIN", "IBS",
"YRI", "LWK", "GWD", "MSL", "ESN",
"ASW", "ACB", "MXL", "PUR", "CLM",
"PEL", "GIH", "PJL", "BEB", "STU", "ITU"
)
filtered_data <- filterPopulation(genetic_data, pop_metadata, populations)
# Compute relatedness
relatedness_results <- computeRelatedness(
filtered_data$vcf_data,
filtered_data$pop_metadata
)
# Perform population structure analysis
pca_results <- analyzePopulationStructure(
filtered_data$vcf_data,
filtered_data$pop_metadata,
method = "pca"
)
# Create visualizations
# PCA plot
pca_plot <- plotPopulationPca(
analysis_results = pca_results,
filtered_data$pop_metadata,
title = "Population Structure PCA",
ellipses = TRUE,
super_pop = TRUE
)
print(pca_plot)
# Ancestry map
ancestry_map <- plotAncestryMap(
pca_results,
filtered_data$pop_metadata,
title = "Global Population Distribution"
)
source("C:/Users/20kob/Desktop/BCB410/genRelateR/R/visualizationScripts.R")
# Ancestry map
ancestry_map <- plotAncestryMap(
pca_results,
filtered_data$pop_metadata,
title = "Global Population Distribution"
)
source("C:/Users/20kob/Desktop/BCB410/genRelateR/R/visualizationScripts.R")
# Ancestry map
ancestry_map <- plotAncestryMap(
pca_results,
filtered_data$pop_metadata,
title = "Global Population Distribution"
)
source("C:/Users/20kob/Desktop/BCB410/genRelateR/R/visualizationScripts.R")
# Ancestry map
ancestry_map <- plotAncestryMap(
pca_results,
filtered_data$pop_metadata,
title = "Global Population Distribution"
)
print(ancestry_map)
# Perform population structure analysis
pca_results <- analyzePopulationStructure(
filtered_data$vcf_data,
filtered_data$pop_metadata,
method = "admixture"
)
#' Install and load required packages for genetic analysis
#'
#' This script installs and loads all necessary packages for the genetic analysis functions.
#' It checks for existing installations and only installs missing packages.
#' @export
setupGeneticPackages <- function() {
# List of required CRAN packages
cranPackages <- c(
"data.table",
"ggplot2",
"reshape2",
"maps",
"viridis",
"tidyverse",
"readr",
"dplyr",
"tidyr",
"testthat",
"stringr",
"ggrepel",
"sf",
"igraph",
"RColorBrewer",
"plotly",
"mapproj",
"LEA"
)
# List of required Bioconductor packages
biocPackages <- c(
"VariantAnnotation",
"GenomicRanges",
"SNPRelate",
"gdsfmt",
"SeqArray"
)
# Install BiocManager if not present
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Install missing CRAN packages
for (pkg in cranPackages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(sprintf("Installing %s from CRAN...", pkg))
install.packages(pkg)
}
}
# Install missing Bioconductor packages
for (pkg in biocPackages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(sprintf("Installing %s from Bioconductor...", pkg))
BiocManager::install(pkg, update = FALSE)
}
}
# Load all required packages with error handling
packages_to_load <- c(
"Matrix",
"parallel",
# Bioconductor packages
"VariantAnnotation",
"GenomicRanges",
"SNPRelate",
"gdsfmt",
"SeqArray",
# CRAN packages
"data.table",
"ggplot2",
"reshape2",
"maps",
"viridis",
"tidyverse",
"readr",
"dplyr",
"tidyr",
"stringr",
"ggrepel",
"sf",
"igraph",
"RColorBrewer",
"plotly",
"mapproj",
"LEA"
)
for (pkg in packages_to_load) {
tryCatch({
library(pkg, character.only = TRUE)
message(sprintf("Successfully loaded %s", pkg))
}, error = function(e) {
warning(sprintf("Failed to load %s: %s", pkg, e$message))
})
}
# Check if all packages were successfully loaded
loaded_packages <- (.packages())
missing_packages <- setdiff(packages_to_load, loaded_packages)
if (length(missing_packages) > 0) {
warning(sprintf(
"The following packages failed to load: %s",
paste(missing_packages, collapse = ", ")
))
} else {
message("All required packages have been installed and loaded successfully.")
}
# Return invisibly whether all packages were loaded successfully
invisible(length(missing_packages) == 0)
}
#' Function to verify all required packages are available
#' @return Logical indicating if all required packages are available
#' @export
checkGeneticPackages <- function() {
required_packages <- c(
"Matrix",
"parallel",
# Bioconductor
"VariantAnnotation",
"GenomicRanges",
"SNPRelate",
"gdsfmt",
"SeqArray",
# CRAN
"data.table",
"ggplot2",
"reshape2",
"maps",
"viridis",
"tidyverse",
"readr",
"dplyr",
"tidyr",
"testthat",
"stringr",
"ggrepel",
"sf",
"igraph",
"RColorBrewer",
"plotly",
"mapproj",
"LEA"
)
missing_packages <- required_packages[
!sapply(required_packages, requireNamespace, quietly = TRUE)
]
if (length(missing_packages) > 0) {
warning(sprintf(
"Missing required packages: %s\nPlease run setupGeneticPackages()",
paste(missing_packages, collapse = ", ")
))
return(FALSE)
}
return(TRUE)
}
# If this file is being sourced directly, run the setup
if (sys.nframe() == 0) {
setupGeneticPackages()
source("R/loadAndCleanData.R")
source("R/computationAndAnalysis.R")
source("R/visualizationScripts.R")
}
#' Install and load required packages for genetic analysis
#'
#' This script installs and loads all necessary packages for the genetic analysis functions.
#' It checks for existing installations and only installs missing packages.
#' @export
setupGeneticPackages <- function() {
# List of required CRAN packages
cranPackages <- c(
"data.table",
"ggplot2",
"reshape2",
"maps",
"viridis",
"tidyverse",
"readr",
"dplyr",
"tidyr",
"testthat",
"stringr",
"ggrepel",
"sf",
"igraph",
"RColorBrewer",
"plotly",
"mapproj"
)
# List of required Bioconductor packages
biocPackages <- c(
"VariantAnnotation",
"GenomicRanges",
"SNPRelate",
"gdsfmt",
"SeqArray"
)
# Install BiocManager if not present
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Install missing CRAN packages
for (pkg in cranPackages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(sprintf("Installing %s from CRAN...", pkg))
install.packages(pkg)
}
}
# Install missing Bioconductor packages
for (pkg in biocPackages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(sprintf("Installing %s from Bioconductor...", pkg))
BiocManager::install(pkg, update = FALSE)
}
}
# Load all required packages with error handling
packages_to_load <- c(
"Matrix",
"parallel",
# Bioconductor packages
"VariantAnnotation",
"GenomicRanges",
"SNPRelate",
"gdsfmt",
"SeqArray",
# CRAN packages
"data.table",
"ggplot2",
"reshape2",
"maps",
"viridis",
"tidyverse",
"readr",
"dplyr",
"tidyr",
"stringr",
"ggrepel",
"sf",
"igraph",
"RColorBrewer",
"plotly",
"mapproj"
)
for (pkg in packages_to_load) {
tryCatch({
library(pkg, character.only = TRUE)
message(sprintf("Successfully loaded %s", pkg))
}, error = function(e) {
warning(sprintf("Failed to load %s: %s", pkg, e$message))
})
}
# Check if all packages were successfully loaded
loaded_packages <- (.packages())
missing_packages <- setdiff(packages_to_load, loaded_packages)
if (length(missing_packages) > 0) {
warning(sprintf(
"The following packages failed to load: %s",
paste(missing_packages, collapse = ", ")
))
} else {
message("All required packages have been installed and loaded successfully.")
}
# Return invisibly whether all packages were loaded successfully
invisible(length(missing_packages) == 0)
}
#' Function to verify all required packages are available
#' @return Logical indicating if all required packages are available
#' @export
checkGeneticPackages <- function() {
required_packages <- c(
"Matrix",
"parallel",
# Bioconductor
"VariantAnnotation",
"GenomicRanges",
"SNPRelate",
"gdsfmt",
"SeqArray",
# CRAN
"data.table",
"ggplot2",
"reshape2",
"maps",
"viridis",
"tidyverse",
"readr",
"dplyr",
"tidyr",
"testthat",
"stringr",
"ggrepel",
"sf",
"igraph",
"RColorBrewer",
"plotly",
"mapproj"
)
missing_packages <- required_packages[
!sapply(required_packages, requireNamespace, quietly = TRUE)
]
if (length(missing_packages) > 0) {
warning(sprintf(
"Missing required packages: %s\nPlease run setupGeneticPackages()",
paste(missing_packages, collapse = ", ")
))
return(FALSE)
}
return(TRUE)
}
# If this file is being sourced directly, run the setup
if (sys.nframe() == 0) {
setupGeneticPackages()
source("R/loadAndCleanData.R")
source("R/computationAndAnalysis.R")
source("R/visualizationScripts.R")
}
devtools::document()
devtools::build_vignettes()
Sys.which("Rcmd.exe")
devtools::install()
devtools::document()
warnings()
rm(list = ls())
devtools::document()
devtools::clean_cache()
warnings()
